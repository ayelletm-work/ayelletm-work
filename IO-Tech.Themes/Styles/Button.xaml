<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:converters="clr-namespace:IO_Tech.Themes.Converters"
    xmlns:helpers="clr-namespace:IO_Tech.Themes.Helpers"
    xmlns:system="clr-namespace:System;assembly=mscorlib" 
    xmlns:customRipple="clr-namespace:IO_Tech.Themes.CustomControls.CustomRipple">
    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary>
            <BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter" />
            <converters:BorderClipConverter x:Key="BorderClipConverter" />
            <converters:BrushOpacityConverter x:Key="BrushOpacityConverter" />
        </ResourceDictionary>
    </ResourceDictionary.MergedDictionaries>

    <Style x:Key="FocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Rectangle
                        Margin="2"
                        SnapsToDevicePixels="true"
                        Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"
                        StrokeDashArray="1 2"
                        StrokeThickness="1" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <converters:RangeLengthConverter x:Key="RangeLengthConverter" />
    <converters:MathConverter x:Key="MathAddConverter" Operation="Add" />

    <!--#region Raised Button-->

    <Style x:Key="RaisedButtonStyle" TargetType="{x:Type ButtonBase}">
        <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}" />
        <Setter Property="Background" Value="{DynamicResource ControlPrimaryBgBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource ControlPrimaryBorderBrush}" />
        <Setter Property="Foreground" Value="{DynamicResource PrimaryForeground}" />
        <Setter Property="Cursor" Value="Hand" />
        <Setter Property="TextBlock.FontWeight" Value="Medium" />
        <Setter Property="TextBlock.FontSize" Value="14" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Padding" Value="16,4,16,4" />
        <Setter Property="Height" Value="32" />
        <Setter Property="helpers:ShadowAssist.ShadowDepth" Value="Depth1" />
        <Setter Property="helpers:ButtonAssist.CornerRadius" Value="2" />
        <Setter Property="customRipple:RippleAssist.Feedback" Value="White" />
        <Setter Property="helpers:ButtonProgressAssist.IndicatorForeground" Value="{DynamicResource PrimaryForeground}" />
        <Setter Property="helpers:ButtonProgressAssist.IndicatorBackground" Value="{DynamicResource ControlPrimaryBgBrush}" />
        <Setter Property="helpers:ButtonProgressAssist.IsIndicatorVisible" Value="False" />
        <Setter Property="helpers:ButtonProgressAssist.Opacity" Value=".4" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ButtonBase}">
                    <Grid>
                        <AdornerDecorator CacheMode="{Binding RelativeSource={RelativeSource Self}, Path=(helpers:ShadowAssist.CacheMode)}">
                            <Grid>
                                <Border
                                    x:Name="border"
                                    Background="{TemplateBinding Background}"
                                    BorderBrush="{TemplateBinding BorderBrush}"
                                    BorderThickness="{TemplateBinding BorderThickness}"
                                    CornerRadius="{Binding Path=(helpers:ButtonAssist.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}"
                                    Effect="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(helpers:ShadowAssist.ShadowDepth), Converter={x:Static converters:ShadowConverter.Instance}}" />
                                <ProgressBar
                                    x:Name="ProgressBar"
                                    Width="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ButtonBase}}, Path=ActualWidth}"
                                    Height="{TemplateBinding Height}"
                                    HorizontalAlignment="Left"
                                    VerticalAlignment="Center"
                                    Background="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(helpers:ButtonProgressAssist.IndicatorBackground)}"
                                    BorderBrush="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(helpers:ButtonProgressAssist.IndicatorBackground)}"
                                    Foreground="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(helpers:ButtonProgressAssist.IndicatorForeground)}"
                                    IsIndeterminate="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(helpers:ButtonProgressAssist.IsIndeterminate)}"
                                    Maximum="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(helpers:ButtonProgressAssist.Maximum)}"
                                    Minimum="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(helpers:ButtonProgressAssist.Minimum)}"
                                    Opacity="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(helpers:ButtonProgressAssist.Opacity)}"
                                    Style="{DynamicResource LinearProgressBar}"
                                    Visibility="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(helpers:ButtonProgressAssist.IsIndicatorVisible), Converter={StaticResource BooleanToVisibilityConverter}}"
                                    Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(helpers:ButtonProgressAssist.Value)}">
                                    <ProgressBar.Clip>
                                        <MultiBinding Converter="{StaticResource BorderClipConverter}">
                                            <Binding ElementName="border" Path="ActualWidth" />
                                            <Binding ElementName="border" Path="ActualHeight" />
                                            <Binding ElementName="border" Path="CornerRadius" />
                                            <Binding ElementName="border" Path="BorderThickness" />
                                        </MultiBinding>
                                    </ProgressBar.Clip>
                                </ProgressBar>
                            </Grid>
                        </AdornerDecorator>
                        <customRipple:Ripple
                            Padding="{TemplateBinding Padding}"
                            HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                            VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                            Content="{TemplateBinding Content}"
                            ContentStringFormat="{TemplateBinding ContentStringFormat}"
                            ContentTemplate="{TemplateBinding ContentTemplate}"
                            Focusable="False"
                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
                            <customRipple:Ripple.Clip>
                                <MultiBinding Converter="{StaticResource BorderClipConverter}">
                                    <Binding ElementName="border" Path="ActualWidth" />
                                    <Binding ElementName="border" Path="ActualHeight" />
                                    <Binding ElementName="border" Path="CornerRadius" />
                                    <Binding ElementName="border" Path="BorderThickness" />
                                </MultiBinding>
                            </customRipple:Ripple.Clip>
                        </customRipple:Ripple>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter TargetName="border" Property="helpers:ShadowAssist.Darken" Value="True" />
                        </Trigger>
                        <Trigger Property="IsKeyboardFocused" Value="true">
                            <Setter TargetName="border" Property="helpers:ShadowAssist.Darken" Value="True" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Opacity" Value="0.38" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style
        x:Key="RaisedLightButtonStyle"
        BasedOn="{StaticResource RaisedButtonStyle}"
        TargetType="{x:Type ButtonBase}">
        <Setter Property="Background" Value="{DynamicResource ControlPrimaryBgBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource ControlPrimaryBorderBrush}" />
        <Setter Property="Foreground" Value="{DynamicResource PrimaryForeground}" />
    </Style>

    <Style
        x:Key="RaisedSecondaryButtonStyle"
        BasedOn="{StaticResource RaisedButtonStyle}"
        TargetType="{x:Type ButtonBase}">
        <Setter Property="Background" Value="{DynamicResource ControlSecondaryBgBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource ControlSecondaryBorderBrush}" />
        <Setter Property="Foreground" Value="{DynamicResource SecondaryForeground}" />
    </Style>


    <!--#endregion-->
    <!--#region Flat Button-->
    <Style x:Key="MaterialDesignFlatButton" TargetType="{x:Type ButtonBase}">
        <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="Foreground" Value="{DynamicResource PrimaryHueMidBrush}"/>
        <Setter Property="TextBlock.FontWeight" Value="Medium"/>
        <Setter Property="TextBlock.FontSize" Value="14"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Padding" Value="16 4 16 4"/>
        <Setter Property="Height" Value="32" />
        <Setter Property="helpers:ButtonAssist.CornerRadius" Value="2" />
        <Setter Property="customRipple:RippleAssist.Feedback" Value="{DynamicResource PrimaryHueMidBrush}" />
        <Setter Property="helpers:ButtonProgressAssist.IndicatorForeground" Value="{DynamicResource PrimaryHueMidForegroundBrush}" />
        <Setter Property="helpers:ButtonProgressAssist.IndicatorBackground" Value="{DynamicResource PrimaryHueMidBrush}" />
        <Setter Property="helpers:ButtonProgressAssist.IsIndicatorVisible" Value="False" />
        <Setter Property="helpers:ButtonProgressAssist.Opacity" Value=".4" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ButtonBase}">
                    <Grid>
                        <Border Background="{TemplateBinding Background}" x:Name="border" 
                                CornerRadius="{Binding Path=(helpers:ButtonAssist.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}"
                                BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}"/>
                        <ProgressBar x:Name="ProgressBar"
                                         Style="{DynamicResource MaterialDesignLinearProgressBar}"
                                         Minimum="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(helpers:ButtonProgressAssist.Minimum)}"
                                         Maximum="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(helpers:ButtonProgressAssist.Maximum)}"
                                         Foreground="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(helpers:ButtonProgressAssist.IndicatorForeground)}"
                                         Background="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(helpers:ButtonProgressAssist.IndicatorBackground)}"
                                         BorderBrush="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(helpers:ButtonProgressAssist.IndicatorBackground)}"
                                         Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(helpers:ButtonProgressAssist.Value)}"
                                         IsIndeterminate="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(helpers:ButtonProgressAssist.IsIndeterminate)}"
                                         Visibility="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(helpers:ButtonProgressAssist.IsIndicatorVisible), Converter={StaticResource BooleanToVisibilityConverter}}"
                                         Height="{TemplateBinding Height}"
                                         Width="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ButtonBase}}, Path=ActualWidth}"
                                         Opacity="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(helpers:ButtonProgressAssist.Opacity)}"
                                         HorizontalAlignment="Left"
                                         VerticalAlignment="Center">
                            <ProgressBar.Clip>
                                <MultiBinding Converter="{StaticResource BorderClipConverter}">
                                    <Binding ElementName="border" Path="ActualWidth" />
                                    <Binding ElementName="border" Path="ActualHeight" />
                                    <Binding ElementName="border" Path="CornerRadius" />
                                    <Binding ElementName="border" Path="BorderThickness" />
                                </MultiBinding>
                            </ProgressBar.Clip>
                        </ProgressBar>

                        <customRipple:Ripple Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}" Focusable="False"
                                        ContentStringFormat="{TemplateBinding ContentStringFormat}"
                                        HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                                        VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                                        Padding="{TemplateBinding Padding}"
                                        SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
                            <customRipple:Ripple.Clip>
                                <MultiBinding Converter="{StaticResource BorderClipConverter}">
                                    <Binding ElementName="border" Path="ActualWidth" />
                                    <Binding ElementName="border" Path="ActualHeight" />
                                    <Binding ElementName="border" Path="CornerRadius" />
                                    <Binding ElementName="border" Path="BorderThickness" />
                                </MultiBinding>
                            </customRipple:Ripple.Clip>
                        </customRipple:Ripple>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Background" TargetName="border" Value="{Binding Foreground,
                                                                                        RelativeSource={RelativeSource Mode=TemplatedParent},
                                                                                        Converter={StaticResource BrushOpacityConverter},
                                                                                        ConverterParameter=0.16}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Opacity" Value="0.38"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
</ResourceDictionary>