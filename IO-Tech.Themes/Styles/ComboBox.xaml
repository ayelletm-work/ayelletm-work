<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:converters="clr-namespace:IO_Tech.Themes.Converters"
    xmlns:customPackIcon="clr-namespace:IO_Tech.Themes.CustomControls.CustomPackIcon"
    xmlns:customPopupEx="clr-namespace:IO_Tech.Themes.CustomControls.CustomPopupEx"
    xmlns:customRipple="clr-namespace:IO_Tech.Themes.CustomControls.CustomRipple"
    xmlns:customSmartHint="clr-namespace:IO_Tech.Themes.CustomControls.CustomSmartHint"
    xmlns:customUnderline="clr-namespace:IO_Tech.Themes.CustomControls.CustomUnderline"
    xmlns:helpers="clr-namespace:IO_Tech.Themes.Helpers"
    xmlns:system="clr-namespace:System;assembly=mscorlib">
    <converters:MathConverter x:Key="MathAddConverter" Operation="Add" />
    <converters:MathConverter x:Key="DivisionMathConverter" Operation="Divide" />
    <converters:MathConverter x:Key="MathMultiplyConverter" Operation="Multiply" />
    <converters:BrushRoundConverter x:Key="BrushRoundConverter" />
    <converters:BooleanToVisibilityConverter
        x:Key="InverseBoolToVisConverter"
        FalseValue="Visible"
        TrueValue="Collapsed" />
    <converters:TextFieldClearButtonVisibilityConverter x:Key="ClearButtonVisibilityConverter" />
    <converters:NotConverter x:Key="NotConverter" />
    <converters:FallbackBrushConverter x:Key="FallbackBrushConverter" />
    <converters:RemoveAlphaBrushConverter x:Key="RemoveAlphaBrushConverter" />
    <converters:FloatingHintOffsetCalculationConverter x:Key="FloatingHintOffsetCalculationConverter" />
    <converters:ComboBoxClearButtonMarginConverter x:Key="ComboBoxClearButtonMarginConverter" />
    <converters:DoubleToThicknessConverter x:Key="DoubleToThicknessConverter" />

    <system:Double x:Key="PopupContentPresenterExtend">4</system:Double>
    <system:Double x:Key="PopupTopBottomMargin">8</system:Double>
    <system:Double x:Key="PopupLeftRightMargin">16</system:Double>
    <system:Boolean x:Key="TrueValue">True</system:Boolean>
    <system:Boolean x:Key="FalseValue">False</system:Boolean>
    <system:String x:Key="AllowCollapse">AllowCollapse</system:String>
    <converters:TextFieldHintVisibilityConverter x:Key="TextFieldHintVisibilityConverter" />

    <Style x:Key="FocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Rectangle
                        Margin="2,2,2,2"
                        SnapsToDevicePixels="true"
                        Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"
                        StrokeDashArray="1 2"
                        StrokeThickness="1" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="DataGridComboBoxItemStyle" TargetType="{x:Type ComboBoxItem}">
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="Padding" Value="8" />
        <Setter Property="HorizontalContentAlignment" Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
        <Setter Property="VerticalContentAlignment" Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ComboBoxItem}">
                    <Border
                        x:Name="Bd"
                        Padding="{TemplateBinding Padding}"
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        SnapsToDevicePixels="true">
                        <ContentPresenter
                            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="Bd" Property="Opacity" Value="0.56" />
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected" Value="False" />
                                <Condition Property="IsMouseOver" Value="True" />
                                <Condition Property="IsKeyboardFocused" Value="False" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="Bd" Property="Background" Value="{DynamicResource Divider}" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected" Value="True" />
                                <Condition Property="IsMouseOver" Value="False" />
                                <Condition Property="IsKeyboardFocused" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="Bd" Property="Background" Value="{DynamicResource Selection}" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected" Value="True" />
                                <Condition Property="IsMouseOver" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="Bd" Property="Background" Value="{DynamicResource Selection}" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected" Value="True" />
                                <Condition Property="IsMouseOver" Value="False" />
                                <Condition Property="IsKeyboardFocused" Value="False" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="Bd" Property="Background" Value="{DynamicResource Selection}" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected" Value="False" />
                                <Condition Property="IsMouseOver" Value="False" />
                                <Condition Property="IsKeyboardFocused" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="Bd" Property="Background" Value="{DynamicResource Divider}" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected" Value="False" />
                                <Condition Property="IsMouseOver" Value="True" />
                                <Condition Property="IsKeyboardFocused" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="Bd" Property="Background" Value="{DynamicResource Divider}" />
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="DataGridComboBoxToggleButton" TargetType="{x:Type ToggleButton}">
        <Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type FrameworkElement}}, Path=(TextElement.Foreground)}" />
        <Setter Property="OverridesDefaultStyle" Value="true" />
        <Setter Property="IsTabStop" Value="false" />
        <Setter Property="Focusable" Value="false" />
        <Setter Property="ClickMode" Value="Press" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border
                        x:Name="templateRoot"
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        SnapsToDevicePixels="true">
                        <Border
                            x:Name="splitBorder"
                            Margin="0"
                            HorizontalAlignment="Right"
                            VerticalAlignment="Center"
                            BorderBrush="Transparent"
                            BorderThickness="0"
                            SnapsToDevicePixels="true">
                            <Viewbox
                                Width="8"
                                Height="8"
                                Margin="2,2,0,0"
                                VerticalAlignment="Center">
                                <Path
                                    x:Name="arrow"
                                    Margin="0"
                                    HorizontalAlignment="Right"
                                    VerticalAlignment="Center"
                                    Data="M0,0L5,5L10,0H7Z"
                                    Fill="{TemplateBinding BorderBrush}"
                                    SnapsToDevicePixels="True" />
                            </Viewbox>
                        </Border>
                    </Border>
                    <ControlTemplate.Triggers>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="true" />
                                <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="false" />
                            </MultiDataTrigger.Conditions>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="true" />
                                <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="true" />
                            </MultiDataTrigger.Conditions>
                            <Setter Property="BorderBrush" Value="{DynamicResource PrimaryHueMidBrush}" />
                        </MultiDataTrigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter TargetName="arrow" Property="Fill" Value="{DynamicResource PrimaryHueDarkBrush}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter TargetName="arrow" Property="Fill" Value="{DynamicResource CheckBoxDisabled}" />
                        </Trigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" Value="false" />
                                <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="false" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="templateRoot" Property="BorderBrush" Value="{DynamicResource CheckBoxDisabled}" />
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" Value="false" />
                                <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="true" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="templateRoot" Property="BorderBrush" Value="{DynamicResource CheckBoxDisabled}" />
                            <Setter TargetName="splitBorder" Property="BorderBrush" Value="{DynamicResource CheckBoxDisabled}" />
                        </MultiDataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <ControlTemplate x:Key="DataGridComboBoxTemplate" TargetType="{x:Type ComboBox}">
        <Grid x:Name="templateRoot" SnapsToDevicePixels="true">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*" />
                <ColumnDefinition Width="0" MinWidth="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}" />
            </Grid.ColumnDefinitions>
            <Popup
                x:Name="PART_Popup"
                Grid.ColumnSpan="2"
                Margin="1"
                AllowsTransparency="true"
                IsOpen="{TemplateBinding IsDropDownOpen}"
                Placement="Bottom"
                PlacementTarget="{Binding RelativeSource={RelativeSource AncestorType=DataGridCell}}"
                PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}">
                <Grid MaxHeight="{TemplateBinding MaxDropDownHeight}" UseLayoutRounding="True">
                    <AdornerDecorator CacheMode="{Binding RelativeSource={RelativeSource Self}, Path=(helpers:ShadowAssist.CacheMode)}">
                        <Border
                            x:Name="shadow"
                            Background="{DynamicResource Paper}"
                            BorderThickness="1"
                            CornerRadius="2"
                            Effect="{DynamicResource ShadowDepth2}" />
                    </AdornerDecorator>
                    <Border
                        x:Name="dropDownBorder"
                        MinWidth="{Binding ActualWidth, RelativeSource={RelativeSource AncestorType=DataGridCell}}"
                        Margin="{Binding ElementName=shadow, Path=Margin, Mode=OneWay}"
                        Background="Transparent"
                        BorderBrush="{DynamicResource Divider}"
                        BorderThickness="1"
                        CornerRadius="2">
                        <ScrollViewer x:Name="DropDownScrollViewer">
                            <Grid x:Name="grid" RenderOptions.ClearTypeHint="Enabled">
                                <Canvas
                                    x:Name="canvas"
                                    Width="0"
                                    Height="0"
                                    HorizontalAlignment="Left"
                                    VerticalAlignment="Top">
                                    <Rectangle
                                        x:Name="opaqueRect"
                                        Width="{Binding ActualWidth, ElementName=dropDownBorder}"
                                        Height="{Binding ActualHeight, ElementName=dropDownBorder}"
                                        Fill="{Binding Background, ElementName=dropDownBorder}" />
                                </Canvas>
                                <ItemsPresenter
                                    x:Name="ItemsPresenter"
                                    KeyboardNavigation.DirectionalNavigation="Contained"
                                    SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                    UseLayoutRounding="False" />
                            </Grid>
                        </ScrollViewer>
                    </Border>
                </Grid>
            </Popup>
            <ToggleButton
                x:Name="toggleButton"
                Grid.Column="0"
                Grid.ColumnSpan="2"
                Background="{TemplateBinding Background}"
                BorderBrush="{TemplateBinding BorderBrush}"
                BorderThickness="{TemplateBinding BorderThickness}"
                IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                Style="{StaticResource DataGridComboBoxToggleButton}" />
            <customSmartHint:SmartHint
                x:Name="Hint"
                Grid.Column="0"
                Margin="{TemplateBinding Padding}"
                FontFamily="{TemplateBinding helpers:HintAssist.FontFamily}"
                FontSize="{TemplateBinding FontSize}"
                Hint="{TemplateBinding helpers:HintAssist.Hint}"
                HintOpacity="{Binding Path=(helpers:HintAssist.HintOpacity), RelativeSource={RelativeSource TemplatedParent}}"
                HintProxy="{Binding RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static converters:HintProxyFabricConverter.Instance}}"
                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                UseFloating="{Binding Path=(helpers:HintAssist.IsFloating), RelativeSource={RelativeSource TemplatedParent}}"
                UseLayoutRounding="{TemplateBinding UseLayoutRounding}" />
            <ContentPresenter
                x:Name="contentPresenter"
                Grid.Column="0"
                Margin="{TemplateBinding Padding}"
                HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                Content="{TemplateBinding SelectionBoxItem}"
                ContentStringFormat="{TemplateBinding SelectionBoxItemStringFormat}"
                ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}"
                ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}"
                IsHitTestVisible="false"
                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger SourceName="PART_Popup" Property="HasDropShadow" Value="true">
                <Setter TargetName="shadow" Property="Margin" Value="5,5,5,5" />
                <Setter TargetName="PART_Popup" Property="HorizontalOffset" Value="-5" />
                <Setter TargetName="PART_Popup" Property="VerticalOffset" Value="-5" />
            </Trigger>
            <Trigger Property="HasItems" Value="false">
                <Setter TargetName="dropDownBorder" Property="Height" Value="95" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsGrouping" Value="true" />
                    <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false" />
                </MultiTrigger.Conditions>
                <Setter Property="ScrollViewer.CanContentScroll" Value="false" />
            </MultiTrigger>
            <Trigger SourceName="DropDownScrollViewer" Property="ScrollViewer.CanContentScroll" Value="false">
                <Setter TargetName="opaqueRect" Property="Canvas.Top" Value="{Binding VerticalOffset, ElementName=DropDownScrollViewer}" />
                <Setter TargetName="opaqueRect" Property="Canvas.Left" Value="{Binding HorizontalOffset, ElementName=DropDownScrollViewer}" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <Style x:Key="DataGridComboBoxEditableTextBox" TargetType="{x:Type TextBox}">
        <Setter Property="OverridesDefaultStyle" Value="true" />
        <Setter Property="AllowDrop" Value="true" />
        <Setter Property="MinWidth" Value="0" />
        <Setter Property="MinHeight" Value="0" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst" />
        <Setter Property="Stylus.IsFlicksEnabled" Value="False" />
        <Setter Property="helpers:TextFieldAssist.TextBoxViewMargin" Value="{x:Static helpers:Constants.DefaultTextBoxViewMarginEmbedded}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBox}">
                    <Grid>
                        <ScrollViewer
                            x:Name="PART_ContentHost"
                            Focusable="false"
                            HorizontalScrollBarVisibility="Hidden"
                            VerticalScrollBarVisibility="Hidden" />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <ControlTemplate x:Key="DataGridComboBoxEditableTemplate" TargetType="{x:Type ComboBox}">
        <Grid x:Name="templateRoot" SnapsToDevicePixels="true">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*" />
                <ColumnDefinition Width="0" MinWidth="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}" />
            </Grid.ColumnDefinitions>
            <Popup
                x:Name="PART_Popup"
                Grid.ColumnSpan="2"
                AllowsTransparency="true"
                IsOpen="{TemplateBinding IsDropDownOpen}"
                Placement="Bottom"
                PlacementTarget="{Binding RelativeSource={RelativeSource AncestorType=DataGridCell}}"
                PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}">
                <Grid MaxHeight="{TemplateBinding MaxDropDownHeight}" UseLayoutRounding="True">
                    <AdornerDecorator CacheMode="{Binding RelativeSource={RelativeSource Self}, Path=(helpers:ShadowAssist.CacheMode)}">
                        <Border
                            x:Name="shadow"
                            Background="{DynamicResource Paper}"
                            BorderThickness="1"
                            CornerRadius="2"
                            Effect="{DynamicResource ShadowDepth2}" />
                    </AdornerDecorator>
                    <Border
                        x:Name="dropDownBorder"
                        MinWidth="{Binding ActualWidth, RelativeSource={RelativeSource AncestorType=DataGridCell}}"
                        Margin="{Binding ElementName=shadow, Path=Margin, Mode=OneWay}"
                        Background="Transparent"
                        BorderBrush="{DynamicResource Divider}"
                        BorderThickness="1"
                        CornerRadius="2">
                        <ScrollViewer x:Name="DropDownScrollViewer">
                            <Grid x:Name="grid" RenderOptions.ClearTypeHint="Enabled">
                                <Canvas
                                    x:Name="canvas"
                                    Width="0"
                                    Height="0"
                                    HorizontalAlignment="Left"
                                    VerticalAlignment="Top">
                                    <Rectangle
                                        x:Name="opaqueRect"
                                        Width="{Binding ActualWidth, ElementName=dropDownBorder}"
                                        Height="{Binding ActualHeight, ElementName=dropDownBorder}"
                                        Fill="{Binding Background, ElementName=dropDownBorder}" />
                                </Canvas>
                                <ItemsPresenter
                                    x:Name="ItemsPresenter"
                                    KeyboardNavigation.DirectionalNavigation="Contained"
                                    SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                    UseLayoutRounding="False" />
                            </Grid>
                        </ScrollViewer>
                    </Border>
                </Grid>
            </Popup>
            <ToggleButton
                x:Name="toggleButton"
                Grid.Column="0"
                Grid.ColumnSpan="2"
                Background="{TemplateBinding Background}"
                BorderBrush="{TemplateBinding BorderBrush}"
                BorderThickness="{TemplateBinding BorderThickness}"
                IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                Style="{StaticResource DataGridComboBoxToggleButton}" />
            <Border
                x:Name="border"
                Grid.Column="0"
                Margin="{TemplateBinding BorderThickness}"
                Background="Transparent">
                <Grid>
                    <customSmartHint:SmartHint
                        x:Name="Hint"
                        Margin="{TemplateBinding Padding}"
                        FontFamily="{TemplateBinding helpers:HintAssist.FontFamily}"
                        FontSize="{TemplateBinding FontSize}"
                        Hint="{TemplateBinding helpers:HintAssist.Hint}"
                        HintOpacity="{Binding Path=(helpers:HintAssist.HintOpacity), RelativeSource={RelativeSource TemplatedParent}}"
                        HintProxy="{Binding RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static converters:HintProxyFabricConverter.Instance}}"
                        SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                        UseFloating="{Binding Path=(helpers:HintAssist.IsFloating), RelativeSource={RelativeSource TemplatedParent}}"
                        UseLayoutRounding="{TemplateBinding UseLayoutRounding}" />
                    <TextBox
                        x:Name="PART_EditableTextBox"
                        Margin="{TemplateBinding Padding}"
                        HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                        VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                        IsReadOnly="{Binding IsReadOnly, RelativeSource={RelativeSource TemplatedParent}}"
                        Style="{StaticResource DataGridComboBoxEditableTextBox}" />
                </Grid>
            </Border>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger SourceName="PART_Popup" Property="HasDropShadow" Value="true">
                <Setter TargetName="shadow" Property="Margin" Value="5,5,5,5" />
                <Setter TargetName="PART_Popup" Property="HorizontalOffset" Value="-5" />
                <Setter TargetName="PART_Popup" Property="VerticalOffset" Value="-5" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
                <Setter TargetName="border" Property="Opacity" Value="0.56" />
            </Trigger>
            <Trigger Property="HasItems" Value="false">
                <Setter TargetName="dropDownBorder" Property="Height" Value="95" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsGrouping" Value="true" />
                    <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false" />
                </MultiTrigger.Conditions>
                <Setter Property="ScrollViewer.CanContentScroll" Value="false" />
            </MultiTrigger>
            <Trigger SourceName="DropDownScrollViewer" Property="ScrollViewer.CanContentScroll" Value="false">
                <Setter TargetName="opaqueRect" Property="Canvas.Top" Value="{Binding VerticalOffset, ElementName=DropDownScrollViewer}" />
                <Setter TargetName="opaqueRect" Property="Canvas.Left" Value="{Binding HorizontalOffset, ElementName=DropDownScrollViewer}" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <Style x:Key="DataGridComboBox" TargetType="{x:Type ComboBox}">
        <!--  Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/  -->
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderBrush" Value="{DynamicResource TextBoxBorder}" />
        <Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type FrameworkElement}}, Path=(TextElement.Foreground)}" />
        <Setter Property="BorderThickness" Value="0,0,0,0" />
        <Setter Property="ItemContainerStyle" Value="{StaticResource DataGridComboBoxItemStyle}" />
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto" />
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
        <Setter Property="Padding" Value="0,0,0,0" />
        <Setter Property="ScrollViewer.CanContentScroll" Value="true" />
        <Setter Property="ScrollViewer.PanningMode" Value="Both" />
        <Setter Property="Stylus.IsFlicksEnabled" Value="False" />
        <Setter Property="Template" Value="{StaticResource DataGridComboBoxTemplate}" />
        <Style.Triggers>
            <Trigger Property="IsEditable" Value="true">
                <Setter Property="IsTabStop" Value="false" />
                <Setter Property="Template" Value="{StaticResource DataGridComboBoxEditableTemplate}" />
            </Trigger>
        </Style.Triggers>
    </Style>


    <ControlTemplate x:Key="PopupContentClassicTemplate" TargetType="ContentControl">
        <Grid MinWidth="{Binding Path=ContentMinWidth, RelativeSource={RelativeSource AncestorType=customPopupEx:ComboBoxPopup}}" Margin="{Binding Path=ContentMargin, RelativeSource={RelativeSource AncestorType=customPopupEx:ComboBoxPopup}}">
            <Grid.RowDefinitions>
                <RowDefinition Height="*" />
            </Grid.RowDefinitions>
            <Border
                Background="Transparent"
                BorderBrush="{DynamicResource ShadowBrush}"
                BorderThickness="1"
                CornerRadius="{Binding Path=CornerRadius, RelativeSource={RelativeSource AncestorType=customPopupEx:ComboBoxPopup}}">
                <Border.Effect>
                    <BlurEffect Radius="6" />
                </Border.Effect>
            </Border>
            <Border
                Margin="1"
                Background="{Binding ElementName=PART_Popup, Path=Background}"
                CornerRadius="{Binding Path=CornerRadius, RelativeSource={RelativeSource AncestorType=customPopupEx:ComboBoxPopup}}">
                <Grid SnapsToDevicePixels="True">
                    <Grid.RowDefinitions>
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="*" />
                        <RowDefinition Height="Auto" />
                    </Grid.RowDefinitions>
                    <Border Grid.Row="0" Height="{StaticResource PopupTopBottomMargin}" />
                    <ContentPresenter Grid.Row="1" />
                    <Border Grid.Row="2" Height="{StaticResource PopupTopBottomMargin}" />
                </Grid>
            </Border>
        </Grid>
    </ControlTemplate>

    <Style x:Key="ComboBoxEditableTextBox" TargetType="{x:Type TextBox}">
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="AllowDrop" Value="True" />
        <Setter Property="MinWidth" Value="0" />
        <Setter Property="MinHeight" Value="0" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst" />
        <Setter Property="Stylus.IsFlicksEnabled" Value="False" />
        <Setter Property="ContextMenu" Value="{DynamicResource DefaultContextMenuStyle}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBox}">
                    <ScrollViewer
                        x:Name="PART_ContentHost"
                        helpers:ScrollViewerAssist.IgnorePadding="True"
                        Focusable="False"
                        HorizontalScrollBarVisibility="Hidden"
                        SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                        UseLayoutRounding="{TemplateBinding UseLayoutRounding}"
                        VerticalScrollBarVisibility="Hidden" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <ControlTemplate x:Key="ComboBoxItemTemplate" TargetType="{x:Type ComboBoxItem}">
        <Grid x:Name="GridWrapper">
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto" />
            </Grid.RowDefinitions>

            <Border
                x:Name="BackBorder"
                Background="{TemplateBinding Background}"
                BorderBrush="{TemplateBinding BorderBrush}"
                BorderThickness="{TemplateBinding BorderThickness}"
                SnapsToDevicePixels="True" />

            <Border
                x:Name="MouseOverBorder"
                Background="{TemplateBinding Foreground,
                                             Converter={StaticResource BrushRoundConverter}}"
                BorderBrush="{TemplateBinding BorderBrush}"
                BorderThickness="{TemplateBinding BorderThickness}"
                Opacity="0"
                SnapsToDevicePixels="True" />
            <Border
                x:Name="SelectedBorder"
                Background="{TemplateBinding Foreground,
                                             Converter={StaticResource BrushRoundConverter}}"
                Opacity="0"
                RenderTransformOrigin="0.5,0.5" />
            <customRipple:Ripple
                Padding="{TemplateBinding Padding}"
                HorizontalAlignment="Stretch"
                VerticalAlignment="Stretch"
                HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                Content="{TemplateBinding Content}"
                ContentTemplate="{TemplateBinding ContentTemplate}"
                ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}"
                Feedback="{TemplateBinding Foreground,
                                           Converter={StaticResource BrushRoundConverter}}"
                Focusable="False"
                RecognizesAccessKey="False"
                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
            <VisualStateManager.VisualStateGroups>
                <VisualStateGroup Name="CommonStates">
                    <VisualStateGroup.Transitions>
                        <VisualTransition GeneratedDuration="0:0:0.3" To="Normal">
                            <VisualTransition.GeneratedEasingFunction>
                                <CircleEase EasingMode="EaseOut" />
                            </VisualTransition.GeneratedEasingFunction>
                        </VisualTransition>
                    </VisualStateGroup.Transitions>
                    <VisualState Name="Normal" />
                    <VisualState Name="MouseOver">
                        <Storyboard>
                            <DoubleAnimation
                                Storyboard.TargetName="MouseOverBorder"
                                Storyboard.TargetProperty="Opacity"
                                To="0.1"
                                Duration="0" />
                        </Storyboard>
                    </VisualState>
                </VisualStateGroup>
                <VisualStateGroup Name="SelectionStates">
                    <VisualStateGroup.Transitions>
                        <VisualTransition GeneratedDuration="0:0:0.3" />
                    </VisualStateGroup.Transitions>
                    <VisualState Name="Selected">
                        <Storyboard>
                            <DoubleAnimation
                                Storyboard.TargetName="SelectedBorder"
                                Storyboard.TargetProperty="Opacity"
                                To="0.18"
                                Duration="0" />
                        </Storyboard>
                    </VisualState>
                    <VisualState Name="Unselected" />
                </VisualStateGroup>
                <VisualStateGroup Name="FocusStates">
                    <VisualStateGroup.Transitions>
                        <VisualTransition GeneratedDuration="0:0:0.3" To="Unfocused" />
                    </VisualStateGroup.Transitions>
                    <VisualState Name="Focused">
                        <Storyboard>
                            <DoubleAnimation
                                Storyboard.TargetName="MouseOverBorder"
                                Storyboard.TargetProperty="Opacity"
                                To="0.1"
                                Duration="0" />
                        </Storyboard>
                    </VisualState>
                    <VisualState Name="Unfocused" />
                </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter TargetName="GridWrapper" Property="Opacity" Value="{x:Static helpers:Constants.TextBoxNotEnabledOpacity}" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="Tag" Value="{StaticResource AllowCollapse}" />
                    <Condition Property="IsSelected" Value="True" />
                </MultiTrigger.Conditions>
                <Setter Property="Height" Value="0" />
            </MultiTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <Style x:Key="ComboBoxItemStyle" TargetType="{x:Type ComboBoxItem}">
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="Padding" Value="16,8" />
        <Setter Property="HorizontalContentAlignment" Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
        <Setter Property="VerticalContentAlignment" Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}" />
        <Setter Property="Template" Value="{StaticResource ComboBoxItemTemplate}" />
    </Style>

    <Style
        x:Key="ComboBoxItemSelectedCollapsedStyle"
        BasedOn="{StaticResource ComboBoxItemStyle}"
        TargetType="{x:Type ComboBoxItem}">
        <Setter Property="Tag" Value="{StaticResource AllowCollapse}" />
    </Style>

    <Style x:Key="ComboBoxToggleButton" TargetType="{x:Type ToggleButton}">
        <Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type FrameworkElement}}, Path=(TextElement.Foreground)}" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="IsTabStop" Value="False" />
        <Setter Property="Focusable" Value="False" />
        <Setter Property="ClickMode" Value="Press" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Grid>
                        <Border
                            x:Name="ToggleTemplateRoot"
                            Padding="{TemplateBinding Padding}"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}">
                            <Border
                                x:Name="splitBorder"
                                Margin="0"
                                HorizontalAlignment="Right"
                                VerticalAlignment="Center"
                                BorderBrush="Transparent"
                                BorderThickness="0">
                                <Path
                                    x:Name="arrow"
                                    Width="{x:Static helpers:Constants.ComboBoxArrowSize}"
                                    Height="{x:Static helpers:Constants.ComboBoxArrowSize}"
                                    Margin="0"
                                    HorizontalAlignment="Right"
                                    VerticalAlignment="Center"
                                    Data="M7,10L12,15L17,10H7Z"
                                    Fill="{TemplateBinding BorderBrush}"
                                    RenderTransformOrigin="0.5,0.5"
                                    Stretch="Uniform" />
                            </Border>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="True" />
                                <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="False" />
                            </MultiDataTrigger.Conditions>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="True" />
                                <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="True" />
                            </MultiDataTrigger.Conditions>
                            <Setter Property="BorderBrush" Value="{Binding Path=(helpers:TextFieldAssist.UnderlineBrush), RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" />
                        </MultiDataTrigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="arrow" Property="Fill" Value="{DynamicResource PrimaryHueMidBrush}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="arrow" Property="Fill" Value="{DynamicResource CheckBoxDisabled}" />
                        </Trigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" Value="False" />
                                <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="False" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="ToggleTemplateRoot" Property="BorderBrush" Value="Transparent" />
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" Value="False" />
                                <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="True" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="ToggleTemplateRoot" Property="BorderBrush" Value="Transparent" />
                            <Setter TargetName="splitBorder" Property="BorderBrush" Value="{DynamicResource CheckBoxDisabled}" />
                        </MultiDataTrigger>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter TargetName="arrow" Property="RenderTransform">
                                <Setter.Value>
                                    <ScaleTransform ScaleY="-1" />
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <ControlTemplate x:Key="FloatingHintComboBoxTemplate" TargetType="{x:Type ComboBox}">
        <AdornerDecorator>
            <Grid>
                <ToggleButton
                    x:Name="toggleButton"
                    Margin="{Binding ElementName=InnerRoot, Path=Margin}"
                    Padding="{TemplateBinding Padding}"
                    Background="{TemplateBinding Background}"
                    BorderBrush="{TemplateBinding BorderBrush}"
                    IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                    Style="{StaticResource ComboBoxToggleButton}" />
                <Border
                    x:Name="templateRoot"
                    helpers:BottomDashedLineAdorner.IsAttached="False"
                    BorderBrush="{TemplateBinding BorderBrush}"
                    BorderThickness="{TemplateBinding BorderThickness}"
                    CornerRadius="{Binding Path=(helpers:TextFieldAssist.TextFieldCornerRadius), RelativeSource={RelativeSource TemplatedParent}}"
                    SnapsToDevicePixels="True">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*" />
                            <ColumnDefinition Width="0" MinWidth="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}" />
                        </Grid.ColumnDefinitions>
                        <Border
                            Grid.Row="0"
                            Grid.Column="0"
                            Padding="{TemplateBinding Padding}">
                            <Grid
                                x:Name="InnerRoot"
                                HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                UseLayoutRounding="{TemplateBinding UseLayoutRounding}">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="Auto" />
                                    <ColumnDefinition Width="*" />
                                    <ColumnDefinition Width="Auto" />
                                </Grid.ColumnDefinitions>
                                <TextBlock
                                    x:Name="PrefixTextBlock"
                                    Grid.Column="0"
                                    FontSize="{TemplateBinding FontSize}"
                                    IsHitTestVisible="False"
                                    Opacity="{TemplateBinding helpers:HintAssist.HintOpacity}"
                                    Text="{TemplateBinding helpers:TextFieldAssist.PrefixText}" />

                                <ContentPresenter
                                    x:Name="contentPresenter"
                                    Grid.Column="1"
                                    Margin="{TemplateBinding helpers:TextFieldAssist.TextBoxViewMargin}"
                                    Content="{TemplateBinding SelectionBoxItem}"
                                    ContentStringFormat="{TemplateBinding SelectionBoxItemStringFormat}"
                                    ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}"
                                    ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}"
                                    IsHitTestVisible="False" />
                                <TextBox
                                    x:Name="PART_EditableTextBox"
                                    Grid.Column="1"
                                    MinWidth="10"
                                    HorizontalAlignment="Stretch"
                                    HorizontalContentAlignment="Stretch"
                                    CaretBrush="{TemplateBinding BorderBrush}"
                                    IsReadOnly="{TemplateBinding IsReadOnly}"
                                    Style="{StaticResource ComboBoxEditableTextBox}"
                                    Visibility="Collapsed" />

                                <customSmartHint:SmartHint
                                    x:Name="Hint"
                                    Grid.Column="1"
                                    Margin="{TemplateBinding helpers:TextFieldAssist.TextBoxViewMargin}"
                                    FloatingOffset="{TemplateBinding helpers:HintAssist.FloatingOffset}"
                                    FloatingScale="{TemplateBinding helpers:HintAssist.FloatingScale}"
                                    FontFamily="{TemplateBinding helpers:HintAssist.FontFamily}"
                                    FontSize="{TemplateBinding FontSize}"
                                    HintOpacity="{TemplateBinding helpers:HintAssist.HintOpacity}"
                                    HintProxy="{Binding RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static converters:HintProxyFabricConverter.Instance}}"
                                    SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                    UseFloating="{TemplateBinding helpers:HintAssist.IsFloating}"
                                    UseLayoutRounding="{TemplateBinding UseLayoutRounding}">
                                    <customSmartHint:SmartHint.Hint>
                                        <Border
                                            x:Name="HintBackgroundBorder"
                                            Background="{TemplateBinding helpers:HintAssist.Background}"
                                            CornerRadius="2">
                                            <ContentPresenter x:Name="HintWrapper" Content="{TemplateBinding helpers:HintAssist.Hint}" />
                                        </Border>
                                    </customSmartHint:SmartHint.Hint>
                                </customSmartHint:SmartHint>

                                <TextBlock
                                    x:Name="SuffixTextBlock"
                                    Grid.Column="2"
                                    Margin="{Binding ActualWidth, ElementName=PART_ClearButton, Converter={StaticResource DoubleToThicknessConverter}, ConverterParameter={x:Static Dock.Right}}"
                                    FontSize="{TemplateBinding FontSize}"
                                    IsHitTestVisible="False"
                                    Opacity="{TemplateBinding helpers:HintAssist.HintOpacity}"
                                    Text="{TemplateBinding helpers:TextFieldAssist.SuffixText}" />
                            </Grid>
                        </Border>
                    </Grid>
                </Border>
                <customUnderline:Underline
                    x:Name="Underline"
                    helpers:TextFieldAssist.UnderlineBrush="{TemplateBinding helpers:TextFieldAssist.UnderlineBrush}"
                    Background="{TemplateBinding helpers:TextFieldAssist.UnderlineBrush}"
                    CornerRadius="{TemplateBinding helpers:TextFieldAssist.UnderlineCornerRadius}"
                    IsActive="{Binding ElementName=PART_EditableTextBox, Path=IsKeyboardFocused}"
                    Visibility="{TemplateBinding helpers:TextFieldAssist.DecorationVisibility}" />
                <Canvas VerticalAlignment="Bottom">
                    <TextBlock
                        Canvas.Top="2"
                        MaxWidth="{Binding ActualWidth, ElementName=toggleButton}"
                        FontSize="{TemplateBinding helpers:HintAssist.HelperTextFontSize}"
                        Opacity="{TemplateBinding helpers:HintAssist.HintOpacity}"
                        Text="{TemplateBinding helpers:HintAssist.HelperText}" />
                </Canvas>
                <customPopupEx:ComboBoxPopup
                    x:Name="PART_Popup"
                    Grid.Column="0"
                    helpers:ColorZoneAssist.Mode="{Binding Path=(helpers:ColorZoneAssist.Mode), RelativeSource={RelativeSource TemplatedParent}}"
                    AllowsTransparency="True"
                    ClassicContentTemplate="{StaticResource PopupContentClassicTemplate}"
                    ClassicMode="True"
                    ContentMargin="6,0,6,6"
                    ContentMinWidth="{Binding Path=ActualWidth, ElementName=templateRoot}"
                    DefaultVerticalOffset="-1"
                    DownVerticalOffset="0"
                    Focusable="False"
                    HorizontalOffset="0"
                    IsOpen="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                    Placement="Custom"
                    PlacementTarget="{Binding ElementName=templateRoot}"
                    PopupAnimation="Fade"
                    RelativeHorizontalOffset="-6"
                    SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                    Tag="{DynamicResource Paper}"
                    UpVerticalOffset="15"
                    UseLayoutRounding="{TemplateBinding UseLayoutRounding}"
                    VerticalOffset="0">
                    <customPopupEx:ComboBoxPopup.Background>
                        <MultiBinding Converter="{StaticResource FallbackBrushConverter}">
                            <Binding Path="Background" RelativeSource="{RelativeSource TemplatedParent}" />
                            <Binding ElementName="PART_Popup" Path="Tag" />
                        </MultiBinding>
                    </customPopupEx:ComboBoxPopup.Background>
                    <customPopupEx:ComboBoxPopup.Style>
                        <Style BasedOn="{StaticResource {x:Type customPopupEx:ComboBoxPopup}}" TargetType="customPopupEx:ComboBoxPopup">
                            <Setter Property="CornerRadius" Value="0,0,4,4" />
                            <Style.Triggers>
                                <Trigger Property="OpenDirection" Value="Up">
                                    <Setter Property="CornerRadius" Value="4,4,0,0" />
                                </Trigger>
                            </Style.Triggers>
                        </Style>
                    </customPopupEx:ComboBoxPopup.Style>
                    <ContentControl>
                        <ScrollViewer
                            MinHeight="1"
                            MaxHeight="{TemplateBinding MaxDropDownHeight}"
                            Background="{Binding Background, ElementName=PART_Popup}">
                            <ItemsPresenter x:Name="ItemsPresenter" KeyboardNavigation.DirectionalNavigation="Contained" />
                        </ScrollViewer>
                    </ContentControl>
                </customPopupEx:ComboBoxPopup>
                <Button
                    x:Name="PART_ClearButton"
                    Height="Auto"
                    Padding="0"
                    HorizontalAlignment="Right"
                    VerticalAlignment="Center"
                    Command="{x:Static helpers:ClearText.ClearCommand}"
                    Focusable="False"
                    Style="{DynamicResource ToolButton}">
                    <Button.Margin>
                        <MultiBinding Converter="{StaticResource ComboBoxClearButtonMarginConverter}">
                            <Binding Path="Padding" RelativeSource="{RelativeSource TemplatedParent}" />
                            <Binding Path="BorderThickness" RelativeSource="{RelativeSource TemplatedParent}" />
                            <Binding ElementName="InnerRoot" Path="Margin" />
                        </MultiBinding>
                    </Button.Margin>
                    <Button.Visibility>
                        <MultiBinding Converter="{StaticResource ClearButtonVisibilityConverter}">
                            <Binding Path="(helpers:TextFieldAssist.HasClearButton)" RelativeSource="{RelativeSource TemplatedParent}" />
                            <Binding ElementName="Hint" Path="IsContentNullOrEmpty" />
                        </MultiBinding>
                    </Button.Visibility>
                    <customPackIcon:PackIcon Margin="0" Kind="CloseCircle" />
                </Button>
            </Grid>
        </AdornerDecorator>
        <ControlTemplate.Triggers>
            <Trigger Property="helpers:TextFieldAssist.HasOutlinedTextField" Value="True">
                <Setter TargetName="templateRoot" Property="CornerRadius" Value="{Binding Path=(helpers:TextFieldAssist.TextFieldCornerRadius), RelativeSource={RelativeSource TemplatedParent}}" />
                <Setter TargetName="PART_Popup" Property="RelativeHorizontalOffset" Value="-6" />
                <Setter TargetName="PART_Popup" Property="DefaultVerticalOffset" Value="0" />
                <Setter TargetName="PART_Popup" Property="DownVerticalOffset" Value="0" />
                <Setter TargetName="PART_Popup" Property="UpVerticalOffset" Value="0" />
                <Setter TargetName="PART_Popup" Property="CornerRadius" Value="{Binding Path=(helpers:TextFieldAssist.TextFieldCornerRadius), RelativeSource={RelativeSource TemplatedParent}}" />
                <Setter TargetName="PART_Popup" Property="ContentMargin" Value="6,0,6,6" />
                <Setter TargetName="PART_Popup" Property="ContentMinWidth" Value="{Binding Path=ActualWidth, ElementName=templateRoot}" />
                <Setter TargetName="Underline" Property="Visibility" Value="Collapsed" />
                <Setter TargetName="Hint" Property="HintOpacity" Value="1" />
                <Setter TargetName="HintWrapper" Property="Opacity" Value="{Binding Path=(helpers:HintAssist.HintOpacity), RelativeSource={RelativeSource TemplatedParent}}" />
                <Setter TargetName="Hint" Property="FloatingOffset">
                    <Setter.Value>
                        <MultiBinding Converter="{StaticResource FloatingHintOffsetCalculationConverter}">
                            <Binding Path="FontFamily" RelativeSource="{RelativeSource TemplatedParent}" />
                            <Binding Path="FontSize" RelativeSource="{RelativeSource TemplatedParent}" />
                            <Binding Path="(helpers:HintAssist.FloatingScale)" RelativeSource="{RelativeSource TemplatedParent}" />
                            <Binding Path="(helpers:HintAssist.FloatingOffset)" RelativeSource="{RelativeSource TemplatedParent}" />
                            <Binding Path="ActualHeight" RelativeSource="{RelativeSource TemplatedParent}" />
                        </MultiBinding>
                    </Setter.Value>
                </Setter>
            </Trigger>
            <Trigger Property="IsEditable" Value="True">
                <Setter TargetName="PART_EditableTextBox" Property="Visibility" Value="Visible" />
                <Setter TargetName="Underline" Property="Visibility" Value="{Binding Path=(helpers:TextFieldAssist.DecorationVisibility), RelativeSource={RelativeSource TemplatedParent}}" />
                <Setter TargetName="contentPresenter" Property="Visibility" Value="Collapsed" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsGrouping" Value="True" />
                    <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="False" />
                </MultiTrigger.Conditions>
                <Setter Property="ScrollViewer.CanContentScroll" Value="False" />
            </MultiTrigger>

            <!--  Hint  -->
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="helpers:HintAssist.IsFloating" Value="True" />
                    <Condition Property="helpers:TextFieldAssist.HasOutlinedTextField" Value="False" />
                </MultiTrigger.Conditions>
                <Setter TargetName="Hint" Property="FloatingOffset">
                    <Setter.Value>
                        <MultiBinding Converter="{StaticResource FloatingHintOffsetCalculationConverter}">
                            <Binding Path="FontFamily" RelativeSource="{RelativeSource TemplatedParent}" />
                            <Binding Path="FontSize" RelativeSource="{RelativeSource TemplatedParent}" />
                            <Binding Path="(helpers:HintAssist.FloatingScale)" RelativeSource="{RelativeSource TemplatedParent}" />
                            <Binding Path="(helpers:HintAssist.FloatingOffset)" RelativeSource="{RelativeSource TemplatedParent}" />
                        </MultiBinding>
                    </Setter.Value>
                </Setter>
                <Setter TargetName="InnerRoot" Property="Margin">
                    <Setter.Value>
                        <MultiBinding Converter="{StaticResource FloatingHintOffsetCalculationConverter}">
                            <Binding Path="FontFamily" RelativeSource="{RelativeSource TemplatedParent}" />
                            <Binding Path="FontSize" RelativeSource="{RelativeSource TemplatedParent}" />
                            <Binding Path="(helpers:HintAssist.FloatingScale)" RelativeSource="{RelativeSource TemplatedParent}" />
                            <Binding Path="(helpers:HintAssist.FloatingOffset)" RelativeSource="{RelativeSource TemplatedParent}" />
                        </MultiBinding>
                    </Setter.Value>
                </Setter>
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="helpers:TextFieldAssist.HasOutlinedTextField" Value="True" />
                    <Condition Property="helpers:HintAssist.IsFloating" Value="True" />
                    <Condition SourceName="Hint" Property="IsHintInFloatingPosition" Value="True" />
                </MultiTrigger.Conditions>
                <Setter TargetName="HintBackgroundBorder" Property="Padding" Value="4,0" />
                <Setter Property="helpers:HintAssist.Background" Value="{DynamicResource Paper}" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition SourceName="Hint" Property="IsContentNullOrEmpty" Value="False" />
                    <Condition SourceName="PART_EditableTextBox" Property="IsKeyboardFocused" Value="True" />
                </MultiTrigger.Conditions>
                <Setter TargetName="Hint" Property="Foreground" Value="{Binding Path=(helpers:HintAssist.Foreground), RelativeSource={RelativeSource TemplatedParent}}" />
                <Setter TargetName="Hint" Property="HintOpacity" Value="1" />
            </MultiTrigger>

            <!--  IsEnabled  -->
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsEnabled" Value="False" />
                    <Condition Property="helpers:TextFieldAssist.HasOutlinedTextField" Value="False" />
                </MultiTrigger.Conditions>
                <Setter TargetName="templateRoot" Property="Opacity" Value="{x:Static helpers:Constants.TextBoxNotEnabledOpacity}" />
            </MultiTrigger>
            <!--  TODO Single trigger  -->
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsEnabled" Value="False" />
                </MultiTrigger.Conditions>
                <Setter TargetName="toggleButton" Property="BorderBrush" Value="Transparent" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsEnabled" Value="False" />
                    <Condition Property="helpers:TextFieldAssist.HasOutlinedTextField" Value="True" />
                </MultiTrigger.Conditions>
                <Setter Property="BorderBrush" Value="{DynamicResource TextAreaInactiveBorder}" />
                <Setter TargetName="PrefixTextBlock" Property="Opacity" Value="{x:Static helpers:Constants.TextBoxNotEnabledOpacity}" />
                <Setter TargetName="contentPresenter" Property="Opacity" Value="{x:Static helpers:Constants.TextBoxNotEnabledOpacity}" />
                <Setter TargetName="PART_EditableTextBox" Property="Opacity" Value="{x:Static helpers:Constants.TextBoxNotEnabledOpacity}" />
                <Setter TargetName="SuffixTextBlock" Property="Opacity" Value="{x:Static helpers:Constants.TextBoxNotEnabledOpacity}" />
                <Setter TargetName="PART_ClearButton" Property="Opacity" Value="{x:Static helpers:Constants.TextBoxNotEnabledOpacity}" />
                <Setter TargetName="HintWrapper" Property="Opacity">
                    <Setter.Value>
                        <Binding
                            Converter="{StaticResource MathMultiplyConverter}"
                            ConverterParameter="{x:Static helpers:Constants.TextBoxNotEnabledOpacity}"
                            Path="(helpers:HintAssist.HintOpacity)"
                            RelativeSource="{RelativeSource TemplatedParent}" />
                    </Setter.Value>
                </Setter>
            </MultiTrigger>

            <!--  IsKeyboardFocused  -->
            <Trigger Property="IsKeyboardFocused" Value="True">
                <Setter Property="BorderBrush" Value="{Binding Path=(helpers:TextFieldAssist.UnderlineBrush), RelativeSource={RelativeSource Self}}" />
            </Trigger>
            <Trigger Property="IsKeyboardFocusWithin" Value="True">
                <Setter Property="BorderBrush" Value="{Binding Path=(helpers:TextFieldAssist.UnderlineBrush), RelativeSource={RelativeSource Self}}" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsKeyboardFocused" Value="True" />
                    <Condition Property="helpers:TextFieldAssist.HasOutlinedTextField" Value="False" />
                </MultiTrigger.Conditions>
                <Setter TargetName="Underline" Property="IsActive" Value="True" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsKeyboardFocusWithin" Value="True" />
                    <Condition Property="helpers:TextFieldAssist.HasOutlinedTextField" Value="True" />
                    <Condition Property="helpers:HintAssist.IsFloating" Value="True" />
                    <Condition SourceName="Hint" Property="IsHintInFloatingPosition" Value="True" />
                </MultiTrigger.Conditions>
                <Setter TargetName="HintWrapper" Property="Opacity" Value="1" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsKeyboardFocusWithin" Value="True" />
                    <Condition SourceName="Hint" Property="IsContentNullOrEmpty" Value="False" />
                    <Condition Property="helpers:HintAssist.IsFloating" Value="True" />
                </MultiTrigger.Conditions>
                <Setter TargetName="Hint" Property="Foreground" Value="{Binding Path=(helpers:HintAssist.Foreground), RelativeSource={RelativeSource TemplatedParent}}" />
                <Setter TargetName="Hint" Property="HintOpacity" Value="1" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsKeyboardFocusWithin" Value="True" />
                    <Condition Property="helpers:HintAssist.IsFloating" Value="True" />
                    <Condition SourceName="Hint" Property="IsHintInFloatingPosition" Value="True" />
                </MultiTrigger.Conditions>
                <Setter TargetName="Hint" Property="Foreground" Value="{Binding Path=(helpers:HintAssist.Foreground), RelativeSource={RelativeSource TemplatedParent}}" />
                <Setter TargetName="Hint" Property="HintOpacity" Value="1" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsKeyboardFocused" Value="True" />
                    <Condition Property="helpers:TextFieldAssist.HasOutlinedTextField" Value="True" />
                </MultiTrigger.Conditions>
                <Setter TargetName="templateRoot" Property="Margin" Value="-1" />
                <Setter TargetName="templateRoot" Property="BorderThickness" Value="2" />
            </MultiTrigger>

            <!--  IsDropDownOpen  -->
            <!--  TODO: Single trigger  -->
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsDropDownOpen" Value="True" />
                </MultiTrigger.Conditions>
                <Setter TargetName="Underline" Property="IsActive" Value="True" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsDropDownOpen" Value="True" />
                    <Condition Property="helpers:TextFieldAssist.HasOutlinedTextField" Value="True" />
                </MultiTrigger.Conditions>
                <Setter TargetName="templateRoot" Property="Margin" Value="-1" />
                <Setter TargetName="templateRoot" Property="BorderThickness" Value="2" />
                <Setter Property="BorderBrush" Value="{Binding Path=(helpers:TextFieldAssist.UnderlineBrush), RelativeSource={RelativeSource Self}}" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsDropDownOpen" Value="True" />
                    <Condition SourceName="Hint" Property="IsContentNullOrEmpty" Value="False" />
                </MultiTrigger.Conditions>
                <Setter TargetName="Hint" Property="Foreground" Value="{Binding Path=(helpers:HintAssist.Foreground), RelativeSource={RelativeSource TemplatedParent}}" />
                <Setter TargetName="Hint" Property="HintOpacity" Value="1" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsDropDownOpen" Value="True" />
                    <Condition SourceName="Hint" Property="IsContentNullOrEmpty" Value="False" />
                    <Condition Property="helpers:TextFieldAssist.HasOutlinedTextField" Value="True" />
                </MultiTrigger.Conditions>
                <Setter TargetName="HintWrapper" Property="Opacity" Value="1" />
            </MultiTrigger>

            <!--  IsMouseOver  -->
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsMouseOver" Value="True" />
                    <Condition Property="helpers:TextFieldAssist.HasOutlinedTextField" Value="False" />
                </MultiTrigger.Conditions>
                <Setter Property="BorderBrush" Value="{Binding Path=(helpers:TextFieldAssist.UnderlineBrush), RelativeSource={RelativeSource Self}}" />
                <Setter TargetName="Underline" Property="Background" Value="{Binding Path=(helpers:TextFieldAssist.UnderlineBrush), RelativeSource={RelativeSource Self}}" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsMouseOver" Value="True" />
                    <Condition Property="helpers:TextFieldAssist.HasOutlinedTextField" Value="True" />
                </MultiTrigger.Conditions>
                <Setter TargetName="templateRoot" Property="Margin" Value="-1" />
                <Setter TargetName="templateRoot" Property="BorderThickness" Value="2" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsMouseOver" Value="True" />
                    <Condition Property="helpers:TextFieldAssist.HasOutlinedTextField" Value="True" />
                    <Condition Property="helpers:HintAssist.IsFloating" Value="True" />
                    <Condition SourceName="Hint" Property="IsHintInFloatingPosition" Value="True" />
                </MultiTrigger.Conditions>
                <Setter TargetName="HintWrapper" Property="Opacity" Value="1" />
            </MultiTrigger>

            <!--  Validation.HasError  -->
            <Trigger Property="Validation.HasError" Value="True">
                <Setter Property="BorderBrush" Value="{DynamicResource ValidationErrorBrush}" />
                <Setter TargetName="Underline" Property="Background" Value="{DynamicResource ValidationErrorBrush}" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="Validation.HasError" Value="True" />
                    <Condition Property="helpers:TextFieldAssist.HasOutlinedTextField" Value="True" />
                </MultiTrigger.Conditions>
                <Setter TargetName="templateRoot" Property="Margin" Value="-1" />
                <Setter TargetName="templateRoot" Property="BorderThickness" Value="2" />
                <Setter Property="BorderBrush" Value="{DynamicResource ValidationErrorBrush}" />
            </MultiTrigger>

            <!--  PART_Popup.IsOpen  -->
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition SourceName="PART_Popup" Property="IsOpen" Value="True" />
                    <Condition SourceName="PART_Popup" Property="helpers:ColorZoneAssist.Mode" Value="Standard" />
                </MultiTrigger.Conditions>
                <Setter TargetName="PART_Popup" Property="Tag" Value="{DynamicResource Paper}" />
                <Setter TargetName="PART_Popup" Property="Background" Value="{Binding Tag, RelativeSource={RelativeSource Self}, Converter={StaticResource RemoveAlphaBrushConverter}}" />
                <Setter Property="TextElement.Foreground" Value="{DynamicResource Body}" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition SourceName="PART_Popup" Property="IsOpen" Value="True" />
                    <Condition SourceName="PART_Popup" Property="helpers:ColorZoneAssist.Mode" Value="Inverted" />
                </MultiTrigger.Conditions>
                <Setter TargetName="PART_Popup" Property="Tag" Value="{DynamicResource Body}" />
                <Setter TargetName="PART_Popup" Property="Background" Value="{Binding Tag, RelativeSource={RelativeSource Self}, Converter={StaticResource RemoveAlphaBrushConverter}}" />
                <Setter Property="TextElement.Foreground" Value="{DynamicResource Paper}" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition SourceName="PART_Popup" Property="IsOpen" Value="True" />
                    <Condition SourceName="PART_Popup" Property="helpers:ColorZoneAssist.Mode" Value="PrimaryLight" />
                </MultiTrigger.Conditions>
                <Setter TargetName="PART_Popup" Property="Tag" Value="{DynamicResource PrimaryHueLightBrush}" />
                <Setter TargetName="PART_Popup" Property="Background" Value="{Binding Tag, RelativeSource={RelativeSource Self}, Converter={StaticResource RemoveAlphaBrushConverter}}" />
                <Setter Property="TextElement.Foreground" Value="{DynamicResource PrimaryHueLightForegroundBrush}" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition SourceName="PART_Popup" Property="IsOpen" Value="True" />
                    <Condition SourceName="PART_Popup" Property="helpers:ColorZoneAssist.Mode" Value="PrimaryMid" />
                </MultiTrigger.Conditions>
                <Setter TargetName="PART_Popup" Property="Tag" Value="{DynamicResource PrimaryHueMidBrush}" />
                <Setter TargetName="PART_Popup" Property="Background" Value="{Binding Tag, RelativeSource={RelativeSource Self}, Converter={StaticResource RemoveAlphaBrushConverter}}" />
                <Setter Property="TextElement.Foreground" Value="{DynamicResource PrimaryHueMidForegroundBrush}" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition SourceName="PART_Popup" Property="IsOpen" Value="True" />
                    <Condition SourceName="PART_Popup" Property="helpers:ColorZoneAssist.Mode" Value="PrimaryDark" />
                </MultiTrigger.Conditions>
                <Setter TargetName="PART_Popup" Property="Tag" Value="{DynamicResource PrimaryHueDarkBrush}" />
                <Setter TargetName="PART_Popup" Property="Background" Value="{Binding Tag, RelativeSource={RelativeSource Self}, Converter={StaticResource RemoveAlphaBrushConverter}}" />
                <Setter Property="TextElement.Foreground" Value="{DynamicResource PrimaryHueDarkForegroundBrush}" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition SourceName="PART_Popup" Property="IsOpen" Value="True" />
                    <Condition SourceName="PART_Popup" Property="helpers:ColorZoneAssist.Mode" Value="SecondaryLight" />
                </MultiTrigger.Conditions>
                <Setter TargetName="PART_Popup" Property="Tag" Value="{DynamicResource SecondaryHueLightBrush}" />
                <Setter TargetName="PART_Popup" Property="Background" Value="{Binding Tag, RelativeSource={RelativeSource Self}, Converter={StaticResource RemoveAlphaBrushConverter}}" />
                <Setter Property="TextElement.Foreground" Value="{DynamicResource SecondaryHueLightForegroundBrush}" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition SourceName="PART_Popup" Property="IsOpen" Value="True" />
                    <Condition SourceName="PART_Popup" Property="helpers:ColorZoneAssist.Mode" Value="SecondaryMid" />
                </MultiTrigger.Conditions>
                <Setter TargetName="PART_Popup" Property="Tag" Value="{DynamicResource SecondaryHueMidBrush}" />
                <Setter TargetName="PART_Popup" Property="Background" Value="{Binding Tag, RelativeSource={RelativeSource Self}, Converter={StaticResource RemoveAlphaBrushConverter}}" />
                <Setter Property="TextElement.Foreground" Value="{DynamicResource SecondaryHueMidForegroundBrush}" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition SourceName="PART_Popup" Property="IsOpen" Value="True" />
                    <Condition SourceName="PART_Popup" Property="helpers:ColorZoneAssist.Mode" Value="SecondaryDark" />
                </MultiTrigger.Conditions>
                <Setter TargetName="PART_Popup" Property="Tag" Value="{DynamicResource SecondaryHueDarkBrush}" />
                <Setter TargetName="PART_Popup" Property="Background" Value="{Binding Tag, RelativeSource={RelativeSource Self}, Converter={StaticResource RemoveAlphaBrushConverter}}" />
                <Setter Property="TextElement.Foreground" Value="{DynamicResource SecondaryHueDarkForegroundBrush}" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition SourceName="PART_Popup" Property="IsOpen" Value="True" />
                    <Condition SourceName="PART_Popup" Property="helpers:ColorZoneAssist.Mode" Value="Light" />
                </MultiTrigger.Conditions>
                <Setter TargetName="PART_Popup" Property="Tag" Value="{DynamicResource LightBackground}" />
                <Setter TargetName="PART_Popup" Property="Background" Value="{Binding Tag, RelativeSource={RelativeSource Self}, Converter={StaticResource RemoveAlphaBrushConverter}}" />
                <Setter Property="TextElement.Foreground" Value="{DynamicResource LightForeground}" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition SourceName="PART_Popup" Property="IsOpen" Value="True" />
                    <Condition SourceName="PART_Popup" Property="helpers:ColorZoneAssist.Mode" Value="Dark" />
                </MultiTrigger.Conditions>
                <Setter TargetName="PART_Popup" Property="Tag" Value="{DynamicResource DarkBackground}" />
                <Setter TargetName="PART_Popup" Property="Background" Value="{Binding Tag, RelativeSource={RelativeSource Self}, Converter={StaticResource RemoveAlphaBrushConverter}}" />
                <Setter Property="TextElement.Foreground" Value="{DynamicResource DarkForeground}" />
            </MultiTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <Style x:Key="ComboBox" TargetType="{x:Type ComboBox}">
        <Setter Property="helpers:ComboBoxAssist.ShowSelectedItem" Value="True" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderBrush" Value="{DynamicResource TextBoxBorder}" />
        <Setter Property="BorderThickness" Value="0,0,0,1" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type FrameworkElement}}, Path=(TextElement.Foreground)}" />
        <Setter Property="ItemContainerStyle" Value="{StaticResource ComboBoxItemStyle}" />
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto" />
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
        <Setter Property="Padding" Value="{x:Static helpers:Constants.TextBoxDefaultPadding}" />
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="HorizontalAlignment" Value="Stretch" />
        <Setter Property="VerticalContentAlignment" Value="Stretch" />
        <Setter Property="VerticalAlignment" Value="Stretch" />
        <Setter Property="ScrollViewer.CanContentScroll" Value="True" />
        <Setter Property="ScrollViewer.PanningMode" Value="Both" />
        <Setter Property="Stylus.IsFlicksEnabled" Value="False" />
        <Setter Property="Validation.ErrorTemplate" Value="{StaticResource ValidationErrorTemplate}" />
        <Setter Property="helpers:TextFieldAssist.TextBoxViewMargin" Value="{x:Static helpers:Constants.DefaultTextBoxViewMarginEmbedded}" />
        <Setter Property="helpers:TextFieldAssist.UnderlineBrush" Value="{DynamicResource PrimaryHueMidBrush}" />
        <Setter Property="helpers:ColorZoneAssist.Mode" Value="Standard" />
        <Setter Property="helpers:HintAssist.Foreground" Value="{DynamicResource PrimaryHueMidBrush}" />
        <Setter Property="Template" Value="{StaticResource FloatingHintComboBoxTemplate}" />
        <Setter Property="helpers:ClearText.HandlesClearCommand" Value="True" />
        <Style.Triggers>
            <Trigger Property="IsEditable" Value="True">
                <Setter Property="IsTabStop" Value="False" />
                <!--  designer prefers hard bool  -->
                <Setter Property="helpers:ComboBoxAssist.ShowSelectedItem" Value="{StaticResource TrueValue}" />
            </Trigger>
            <!--  designer prefers hard bool  -->
            <Trigger Property="helpers:ComboBoxAssist.ShowSelectedItem" Value="{StaticResource FalseValue}">
                <Setter Property="ItemContainerStyle" Value="{StaticResource ComboBoxItemSelectedCollapsedStyle}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style
        x:Key="FloatingHintComboBox"
        BasedOn="{StaticResource ComboBox}"
        TargetType="{x:Type ComboBox}">
        <Setter Property="helpers:HintAssist.IsFloating" Value="True" />
    </Style>

    <Style
        x:Key="FilledComboBox"
        BasedOn="{StaticResource FloatingHintComboBox}"
        TargetType="{x:Type ComboBox}">
        <Setter Property="helpers:TextFieldAssist.TextFieldCornerRadius" Value="4,4,0,0" />
        <Setter Property="helpers:ComboBoxAssist.ShowSelectedItem" Value="True" />
        <Setter Property="VerticalContentAlignment" Value="Stretch" />
        <Setter Property="VerticalAlignment" Value="Stretch" />
        <Setter Property="Padding" Value="12,8,8,8" />
        <Setter Property="Background" Value="{DynamicResource TextFieldBoxBackground}" />
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{DynamicResource TextFieldBoxHoverBackground}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style
        x:Key="OutlinedComboBox"
        BasedOn="{StaticResource FloatingHintComboBox}"
        TargetType="ComboBox">
        <Setter Property="helpers:TextFieldAssist.HasOutlinedTextField" Value="True" />
        <Setter Property="helpers:TextFieldAssist.TextFieldCornerRadius" Value="4" />
        <Setter Property="Padding" Value="16" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="BorderBrush" Value="{DynamicResource TextAreaBorder}" />
    </Style>

    <!--  OBSOLETE  -->
    <ControlTemplate x:Key="PopupContentUpTemplate" TargetType="ContentControl">
        <Grid MinWidth="{Binding Path=ContentMinWidth, RelativeSource={RelativeSource AncestorType=customPopupEx:ComboBoxPopup}}" Margin="{Binding Path=ContentMargin, RelativeSource={RelativeSource AncestorType=customPopupEx:ComboBoxPopup}}">
            <Grid.RowDefinitions>
                <RowDefinition Height="*" />
            </Grid.RowDefinitions>
            <Border
                Background="Transparent"
                BorderBrush="{DynamicResource ShadowBrush}"
                BorderThickness="1"
                CornerRadius="{Binding Path=CornerRadius, RelativeSource={RelativeSource AncestorType=customPopupEx:ComboBoxPopup}}">
                <Border.Effect>
                    <BlurEffect Radius="6" />
                </Border.Effect>
            </Border>
            <Border Margin="1" CornerRadius="{Binding Path=CornerRadius, RelativeSource={RelativeSource AncestorType=customPopupEx:ComboBoxPopup}}">
                <Grid SnapsToDevicePixels="True">
                    <Grid.RowDefinitions>
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="*" />
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="Auto" />
                    </Grid.RowDefinitions>
                    <Border
                        Grid.Row="0"
                        Height="{StaticResource PopupTopBottomMargin}"
                        Background="{Binding ElementName=PART_Popup, Path=Background}" />
                    <ContentPresenter Grid.Row="1" />
                    <Border
                        Grid.Row="2"
                        Height="{StaticResource PopupContentPresenterExtend}"
                        Background="{Binding ElementName=PART_Popup, Path=Background}" />

                    <Grid Grid.Row="3">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="*" />
                        </Grid.ColumnDefinitions>
                        <Border
                            Grid.Column="0"
                            Width="{StaticResource PopupLeftRightMargin}"
                            Background="{Binding ElementName=PART_Popup, Path=Background}" />
                        <Grid
                            Grid.Column="1"
                            Width="{Binding RelativeSource={RelativeSource AncestorType={x:Type customPopupEx:ComboBoxPopup}}, Path=VisiblePlacementWidth}"
                            Height="{Binding ElementName=templateRoot, Path=ActualHeight}" />
                        <Border
                            Grid.Column="2"
                            MinWidth="{StaticResource PopupLeftRightMargin}"
                            Background="{Binding ElementName=PART_Popup, Path=Background}" />
                    </Grid>
                    <Border
                        Grid.Row="4"
                        Height="{StaticResource PopupTopBottomMargin}"
                        Background="{Binding ElementName=PART_Popup, Path=Background}" />
                </Grid>
            </Border>
        </Grid>
    </ControlTemplate>

    <!--  OBSOLETE  -->
    <ControlTemplate x:Key="PopupContentDownTemplate" TargetType="ContentControl">
        <Grid MinWidth="{Binding Path=ContentMinWidth, RelativeSource={RelativeSource AncestorType=customPopupEx:ComboBoxPopup}}" Margin="{Binding Path=ContentMargin, RelativeSource={RelativeSource AncestorType=customPopupEx:ComboBoxPopup}}">
            <Grid.RowDefinitions>
                <RowDefinition Height="*" />
            </Grid.RowDefinitions>
            <Border
                Background="Transparent"
                BorderBrush="{DynamicResource ShadowBrush}"
                BorderThickness="1"
                CornerRadius="{Binding Path=CornerRadius, RelativeSource={RelativeSource AncestorType=customPopupEx:ComboBoxPopup}}">
                <Border.Effect>
                    <BlurEffect Radius="6" />
                </Border.Effect>
            </Border>
            <Border Margin="1" CornerRadius="{Binding Path=CornerRadius, RelativeSource={RelativeSource AncestorType=customPopupEx:ComboBoxPopup}}">
                <Grid SnapsToDevicePixels="True">
                    <Grid.RowDefinitions>
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="*" />
                        <RowDefinition Height="Auto" />
                    </Grid.RowDefinitions>
                    <Border
                        Grid.Row="0"
                        Height="{StaticResource PopupTopBottomMargin}"
                        Background="{Binding ElementName=PART_Popup, Path=Background}" />
                    <Grid Grid.Row="1">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="*" />
                        </Grid.ColumnDefinitions>
                        <Border
                            Grid.Column="0"
                            Width="{StaticResource PopupLeftRightMargin}"
                            Background="{Binding ElementName=PART_Popup, Path=Background}" />
                        <Grid
                            Grid.Column="1"
                            Width="{Binding RelativeSource={RelativeSource AncestorType={x:Type customPopupEx:ComboBoxPopup}}, Path=VisiblePlacementWidth}"
                            Height="{Binding ElementName=templateRoot, Path=ActualHeight}" />
                        <Border
                            Grid.Column="2"
                            MinWidth="{StaticResource PopupLeftRightMargin}"
                            Background="{Binding ElementName=PART_Popup, Path=Background}" />
                    </Grid>

                    <Border
                        Grid.Row="2"
                        Height="{StaticResource PopupContentPresenterExtend}"
                        Background="{Binding ElementName=PART_Popup, Path=Background}" />

                    <ContentPresenter Grid.Row="3" />

                    <Border
                        Grid.Row="4"
                        Height="{StaticResource PopupTopBottomMargin}"
                        Background="{Binding ElementName=PART_Popup, Path=Background}" />
                </Grid>
            </Border>
        </Grid>
    </ControlTemplate>
</ResourceDictionary>